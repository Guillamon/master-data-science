last_observation <-  dataframe$Period %>% max() %>% floor_date(period) %>% as_date()
c1 <- first_observation
period_df <- data.frame(Period = c1)
n_periods <- time_length (interval (first_observation, last_observation), unit= period)
for (n in 2: (n_periods+1)) {
period_df [n,"Period"] <- (first_observation %m+% months(n-1))
}
period_df <- period_df %>%
mutate(Period = as_date(Period))
return (period_df)
}
# Function that creates a dataframe with all periods necessary for tseries, using first and last observations
create_period_df_month <- function(dataframe,period_column= Period, period="month", months_ahead=1) {
first_observation <- dataframe$Period %>% min() %>% floor_date(period) %>% as_date()
last_observation <-  dataframe$Period %>% max() %>% floor_date(period) %>% as_date() %m+% months(months_ahead)
c1 <- first_observation
period_df <- data.frame(Period = c1)
n_periods <- time_length (interval (first_observation, last_observation), unit= period)
for (n in 2: (n_periods+1)) {
period_df [n,"Period"] <- (first_observation %m+% months(n-1))
}
period_df <- period_df %>%
mutate(Period = as_date(Period))
return (period_df)
}
# Function that creates a lagged column with the specified lags
create_lag_months <- function(dframe,lag_vector,suffix = "_Item_Sales", period_col=Period, value_col="Sum_Quantity") {
df_lags <- dframe %>%
mutate(Period= Period %m+% months(lag_vector[1])) %>%
rename(!!paste0("Lag_", lag_vector[1], suffix) := value_col)
if (length(lag_vector)>1) {
for (i in (2:(length(lag_vector)) )) {
df_lags <- dframe %>%
mutate(Period= Period %m+% months(lag_vector[i])) %>%
rename(!!paste0("Lag_", lag_vector[i], suffix) := value_col) %>%
left_join(df_lags)
}
}
return(df_lags)
}
# Function that creates a lagged column with the specified lags
create_lead_months <- function(dframe,lead_vector,suffix = "_Item_Sales", period_col=Period, value_col="Sum_Quantity") {
df_leads <- dframe %>%
mutate(Period= Period %m+% months(-lead_vector[1])) %>%
rename(!!paste0("Lead_", lead_vector[1], suffix) := value_col)
if (length(lead_vector)>1) {
for (i in (2:(length(lead_vector)) )) {
df_leads <- dframe %>%
mutate(Period= Period %m+% months(-lead_vector[i])) %>%
rename(!!paste0("Lead_", lead_vector[i], suffix) := value_col) %>%
left_join(df_leads)
}
}
return(df_leads)
}
# Vectorized function for extracting weekdays
nweekdays <- Vectorize(function(date1, date2)
sum(!wday(seq(date1, date2, "days")) %in% c(6,1)))
# Filtering sales dataframe for given item
# Using second item in list, because first is a seasonal product
filtered_sales <- sales_df_item %>%
filter(`Item No_` == top_items$`Item No_`[2]) %>%
select(-`Item No_`)
# Filtering sales price dataframe for given item, and grouping by date to get sums of promo days, and a mean of price
filtered_sales_price <- full_joined_sales_price %>%
filter(No_ == top_items$`Item No_`[2]) %>%
group_by(Period) %>%
summarise(Num_Days_Price_Promo = sum(Num_Days_Price_Promo),
Num_Days_Promo = sum(Num_Days_Promo),
Quarter_Low_Price = sum(Quarter_Low_Price),
Unit_Price =  mean(Unit_Price)) %>%
ungroup()
# Creating a dataframe with all periods in timespan for given item
period_df <- create_period_df(filtered_sales)
# Creating a dataframe with the months of the seasons
Summer <- c(7,8,9)
Autumn <- c(10,11,12)
Winter <- c(1,2,3)
Spring <- c(4,5,6)
seasons_df <- data.frame(Summer,Autumn,Winter,Spring) %>% gather(key="Season", value="Month")
seasons_df$Season <- factor(seasons_df$Season, levels= c("Winter","Spring","Summer","Autumn"))
# Creating a dataframe with sales grouped by seasons, to be used in exploration only
season_sales <- period_df %>%
mutate(Month = month(Period)) %>%
filter(year(Period)>2014) %>%
filter(Period < '2019-04-01') %>%
left_join(seasons_df, by = c("Month")) %>%
left_join(filtered_sales, by = c("Period")) %>%
select(-Month) %>%
group_by(Year = year(Period),Season) %>%
summarise(Sum_Quantity = sum(Sum_Quantity)) %>%
ungroup()
# Creating a dataframe with Bank Holidays
month_bank_holidays_df <- bank_holidays_df %>%
mutate(Period = floor_date(start, period) %>%  as_date()) %>% #Creating period
group_by(Period) %>%
summarise(Easter = sum(Easter), Num_Holidays= n()) %>%
ungroup() %>%
mutate(Easter = ifelse (Easter>0,1,0)) %>%
right_join(period_df) %>%
replace(is.na(.),0)
# Creating a dataframe with school_holidays
month_school_holidays_df <- school_cal_df %>%
expand_time_int(start_col="Start", end_col="End", line_col="Line", n_days_col="Num_Days", period=period) %>%
mutate(Period = floor_date(Start, period) %>%  as_date()) %>%
mutate(Period = Period %m+% months(Line-1)) %>%
arrange(Period) %>%
#select(Period,Num_Days) %>%
group_by(Period) %>%
summarise(Num_School_Holidays = sum(Num_Days)) %>%
ungroup() %>%
right_join(period_df) %>%
replace(is.na(.),0)
# Creating a dframe with sales of the class
# excludes sales of the forecast item
class_sales_df <- sales_df_item %>%
filter (Period >= '2014-11-01') %>% #doing this for later using lagged values
left_join(class_key_df, by =c("Item No_"="No_")) %>%
inner_join(top_items) %>%
drop_na() %>%
filter(`Item No_` != top_items$`Item No_`[2]) %>% #getting rid of item sales
group_by(Period, Class) %>%
summarise(Class_Sales = sum(Sum_Quantity)) %>%
filter(Class == class_key_df[ match(top_items$`Item No_`[2],class_key_df$No_) ,"Class"]) %>%
select(-Class) %>%
ungroup()
# Creating a df for lagged class sales
lagged_class_df <- class_sales_df %>%
mutate(Period= Period %m+% months(+1)) %>%
rename(Lag_Class_Sales = Class_Sales)
# Creating a df for lagged item sales
lagged_item_sales <- filtered_sales %>%
create_period_df(period = period) %>%
left_join(filtered_sales) %>%
replace(is.na(.),0) %>%
select(Period,Sum_Quantity) %>%
create_lag_months(seq(1,12),value_col = "Sum_Quantity")
# Creating a df for lagged price promo days
lagged_price_promo_df <- filtered_sales_price %>%
select(Period, Num_Days_Price_Promo) %>%
create_period_df(period = period) %>%
left_join(filtered_sales_price) %>%
select(Period, Num_Days_Price_Promo) %>%
create_lag_months(seq(1,12),suffix = "_Price_Promo", value_col = "Num_Days_Price_Promo")
# Creating a df for lagged promo days
lagged_promo_df <- filtered_sales_price %>%
select(Period, Num_Days_Promo) %>%
create_period_df(period = period) %>%
left_join(filtered_sales_price) %>%
select(Period, Num_Days_Promo) %>%
create_lag_months(seq(1,12),suffix = "_Promo", value_col = "Num_Days_Promo")
# Creating a df for lagged bank holidays
lagged_bank_hol_df <- month_bank_holidays_df %>%
create_period_df(period = period) %>%
left_join(month_bank_holidays_df) %>%
select(Period, Num_Holidays) %>%
replace(is.na(.),0) %>%
create_lag_months(seq(1,3),suffix = "_Holidays", value_col = "Num_Holidays")
# Creating a df for lagged school holidays
lagged_school_hol_df <- month_school_holidays_df %>%
select(Period, Num_School_Holidays) %>%
create_period_df(period = period) %>%
left_join(month_school_holidays_df) %>%
replace(is.na(.),0) %>%
create_lag_months(seq(1,6),suffix = "_School_Holidays", value_col = "Num_School_Holidays")
# Creating a df for lead bank holidays
lead_bank_hol_df <- month_bank_holidays_df %>%
create_period_df(period = period) %>%
left_join(month_bank_holidays_df) %>%
select(Period, Num_Holidays) %>%
replace(is.na(.),0) %>%
create_lead_months(seq(1,6),suffix = "_Holidays", value_col = "Num_Holidays")
# Creating a df for lead school holidays
lead_school_hol_df <- month_school_holidays_df %>%
create_period_df(period = period) %>%
left_join(month_school_holidays_df) %>%
select(Period, Num_School_Holidays) %>%
replace(is.na(.),0) %>%
create_lead_months(seq(1,6),suffix = "_School_Holidays", value_col = "Num_School_Holidays")
# Spreading promo days by customer
promo_spread <- full_joined_sales_price %>%
filter(No_ == top_items$`Item No_`[2]) %>%
select(Period, Customer_Code, Num_Days_Promo) %>%
spread(Customer_Code,Num_Days_Promo) %>%
rename_at(vars(-Period), funs(paste0("Days_Promo_", .))) #%>%
# Spreading price promo days by customer
price_promo_spread <- full_joined_sales_price %>%
filter(No_ == top_items$`Item No_`[2]) %>%
select(Period, Customer_Code, Num_Days_Price_Promo) %>%
spread(Customer_Code,Num_Days_Price_Promo) %>%
rename_at(vars(-Period), funs(paste0("Days_Price_Promo_", .))) #%>%
# Spreading unit price by customer
unit_price_spread <- full_joined_sales_price %>%
filter(No_ == top_items$`Item No_`[2]) %>%
filter(year(Period) >= 2015) %>%
select(Period, Customer_Code, Unit_Price) %>%
spread(Customer_Code, Unit_Price) %>%
rename_at(vars(-Period), funs(paste0("Unit_Price_", .))) %>%
replace(is.na(.), 10)
# Creating a dataframe with all features
item_df <- period_df %>%
filter(Period < as_date('2019-05-01')) %>%
mutate(Month=month(Period)) %>%
left_join(filtered_sales, by = c("Period")) %>%
left_join(filtered_sales_price, by = c("Period")) %>%
left_join(month_bank_holidays_df, by = c("Period")) %>%
left_join(month_school_holidays_df, by = c("Period")) %>%
left_join(promo_spread, by = c("Period")) %>%
left_join(price_promo_spread, by = c("Period")) %>%
left_join(unit_price_spread, by = c("Period")) %>%
left_join(lagged_item_sales, by = c("Period")) %>%
left_join(lagged_price_promo_df, by = c("Period")) %>%
left_join(lagged_promo_df, by = c("Period")) %>%
left_join(lagged_bank_hol_df, by = c("Period")) %>%
left_join(lagged_school_hol_df, by = c("Period")) %>%
left_join(lead_bank_hol_df, by = c("Period")) %>%
left_join(lead_school_hol_df, by = c("Period")) %>%
left_join(seasons_df) %>%
replace(is.na(.), 0) %>% #fill nas with zeros
mutate(Winter = as.numeric(Season=="Winter")) %>%
mutate(Summer = as.numeric(Season=="Summer")) %>%
mutate(Spring = as.numeric(Season=="Spring")) %>%
mutate(Autumn = as.numeric(Season=="Autumn")) %>%
mutate(Num_Business_Days = nweekdays(Period, Period %m+% months(+1)-1) -Num_Holidays) %>% #Creating business days feature
select(-c("Month","Season"))
# Saving a vector with names of columns that have all zeros
all_zero <- names( item_df [apply(item_df, MARGIN = 2, FUN = function(x) sum(x==0)/nrow(item_df) ==1)] )
# Getting rid of columns that have all zeros
item_df <- item_df %>%
select(-all_zero)
# Creating a timeseries object with data
item_ts <- item_df %>%
filter (Period >= '2015-09-01') %>%
filter(Period < "2019-04-01") %>%
#filter( Period <='2019-01-01') %>%
select(-Period) %>%
ts(start = c(2015,9), frequency = 12)
#Creating a faceted bar chart to show number of days per month with both promo & promo prices
item_df %>%
mutate(Month = month(Period)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
scale_x_discrete(limits=seq(1,12)) +
facet_grid(Type ~ .)
#let´s see how the number of days per month has evolved along years
#because just promos will probably mean a loss of information when forecasting, let´s look only at promo prices
item_df %>%
mutate(Year = year(Period)) %>%
mutate(Month = month(Period)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Price_Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .)
item_df %>%
mutate(Year = year(Period)) %>%
filter(Year > 2014) %>%
mutate(Month = lubridate::month(Period,label=TRUE)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
#scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .) +
ggtitle(element_blank())+
ylab("Number of Days")
item_df %>%
mutate(Year = year(Period)) %>%
filter(Year > 2014) %>%
mutate(Month = lubridate::month(Period,label=TRUE)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
#scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .) +
ggtitle(element_blank())+
ylab("Number of Days")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25)
legend.position = "none")
item_df %>%
mutate(Year = year(Period)) %>%
filter(Year > 2014) %>%
mutate(Month = lubridate::month(Period,label=TRUE)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
#scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .) +
ggtitle(element_blank())+
ylab("Number of Days")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 1. open the file
png("master-data-science\\Charts\\Promo_Evolution_Monthly.png", width = 900, height = 600)
# 3. Close the file
dev.off()
# 3. Close the file
dev.off()
item_df %>%
mutate(Year = year(Period)) %>%
filter(Year > 2014) %>%
mutate(Month = lubridate::month(Period,label=TRUE)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
#scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .) +
ggtitle(element_blank())+
ylab("Number of Days")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 1. open the file
png("Charts\\Promo_Evolution_Monthly.png", width = 900, height = 600)
item_df %>%
mutate(Year = year(Period)) %>%
filter(Year > 2014) %>%
mutate(Month = lubridate::month(Period,label=TRUE)) %>%
rename(Promo = Num_Days_Promo,
Price_Promo = Num_Days_Price_Promo) %>%
gather ("Type", "Num_Days", 3:4) %>%
filter(Type=="Promo") %>%
ggplot(aes(x=Month, y=Num_Days, fill=as.factor(Month))) +
geom_bar(stat="identity") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position="none") +
#scale_x_discrete(limits=seq(1,12)) +
facet_grid(Year ~ .) +
ggtitle(element_blank())+
ylab("Number of Days")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 3. Close the file
dev.off()
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 1. open the file
png("master-data-science\\Charts\\Promo_Timeline.png", width = 1000, height = 800)
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 3. Close the file
dev.off()
# 3. Close the file
dev.off()
# 1. open the file
png("Charts\\Promo_Timeline.png", width = 1000, height = 800)
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 3. Close the file
dev.off()
# 1. open the file
png("Charts\\Promo_Timeline.png", width = 1000, height = 800)
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 3. Close the file
dev.off()
# 3. Close the file
dev.off()
# 3. Close the file
dev.off()
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 1. open the file
png("Charts\\Promo_Timeline.png", width = 1000, height = 800)
rbind(promo_df, price_promo_df) %>%
ggplot(aes(x=Date, y=Customer_Code, color=Customer_Code, group=`Sales Code`)) +
geom_line(size = 10) +
labs(x="", y=NULL, title="Promotion Timeline") +
facet_grid(Type ~ .) +
scale_color_manual(values=huey) +
ggtitle(element_blank())+
ylab("Customer")+
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 15),
axis.ticks = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 20),
axis.title.x=element_blank(),
axis.title.y = element_text(size = 25),
legend.position = "none")
# 3. Close the file
dev.off()
